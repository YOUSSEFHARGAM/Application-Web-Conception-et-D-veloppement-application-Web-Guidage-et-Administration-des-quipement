//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DAL
{
    public partial class Superviseur
    {
        #region Primitive Properties
    
        public virtual int idSprv
        {
            get;
            set;
        }
    
        public virtual int idAdmin
        {
            get { return _idAdmin; }
            set
            {
                if (_idAdmin != value)
                {
                    if (Administration != null && Administration.idAdmin != value)
                    {
                        Administration = null;
                    }
                    _idAdmin = value;
                }
            }
        }
        private int _idAdmin;
    
        public virtual string loginSprv
        {
            get;
            set;
        }
    
        public virtual string passwordSprv
        {
            get;
            set;
        }
    
        public virtual string nomSprv
        {
            get;
            set;
        }
    
        public virtual string prenomSprv
        {
            get;
            set;
        }
    
        public virtual string statutSprv
        {
            get;
            set;
        }
    
        public virtual string telephoneSprv
        {
            get;
            set;
        }
    
        public virtual string emailSprv
        {
            get;
            set;
        }
    
        public virtual string localeSprv
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Administration Administration
        {
            get { return _administration; }
            set
            {
                if (!ReferenceEquals(_administration, value))
                {
                    var previousValue = _administration;
                    _administration = value;
                    FixupAdministration(previousValue);
                }
            }
        }
        private Administration _administration;
    
        public virtual ICollection<Equipement> Equipements
        {
            get
            {
                if (_equipements == null)
                {
                    var newCollection = new FixupCollection<Equipement>();
                    newCollection.CollectionChanged += FixupEquipements;
                    _equipements = newCollection;
                }
                return _equipements;
            }
            set
            {
                if (!ReferenceEquals(_equipements, value))
                {
                    var previousValue = _equipements as FixupCollection<Equipement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEquipements;
                    }
                    _equipements = value;
                    var newValue = value as FixupCollection<Equipement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEquipements;
                    }
                }
            }
        }
        private ICollection<Equipement> _equipements;

        #endregion
        #region Association Fixup
    
        private void FixupAdministration(Administration previousValue)
        {
            if (previousValue != null && previousValue.Superviseurs.Contains(this))
            {
                previousValue.Superviseurs.Remove(this);
            }
    
            if (Administration != null)
            {
                if (!Administration.Superviseurs.Contains(this))
                {
                    Administration.Superviseurs.Add(this);
                }
                if (idAdmin != Administration.idAdmin)
                {
                    idAdmin = Administration.idAdmin;
                }
            }
        }
    
        private void FixupEquipements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Equipement item in e.NewItems)
                {
                    item.Superviseur = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Equipement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Superviseur, this))
                    {
                        item.Superviseur = null;
                    }
                }
            }
        }

        #endregion
    }
}
