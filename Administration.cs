//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DAL
{
    public partial class Administration
    {
        #region Primitive Properties
    
        public virtual int idAdmin
        {
            get;
            set;
        }
    
        public virtual string loginAdmin
        {
            get;
            set;
        }
    
        public virtual string passwordAdmin
        {
            get;
            set;
        }
    
        public virtual string localeAdmin
        {
            get;
            set;
        }
    
        public virtual string emailAdmin
        {
            get;
            set;
        }
    
        public virtual Nullable<int> telephoneAdmin
        {
            get;
            set;
        }
    
        public virtual string descriptionAdmin
        {
            get;
            set;
        }
    
        public virtual string nomAdmin
        {
            get;
            set;
        }
    
        public virtual string prenomAdmin
        {
            get;
            set;
        }
    
        public virtual string statutAdmin
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Equipement> Equipements
        {
            get
            {
                if (_equipements == null)
                {
                    var newCollection = new FixupCollection<Equipement>();
                    newCollection.CollectionChanged += FixupEquipements;
                    _equipements = newCollection;
                }
                return _equipements;
            }
            set
            {
                if (!ReferenceEquals(_equipements, value))
                {
                    var previousValue = _equipements as FixupCollection<Equipement>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEquipements;
                    }
                    _equipements = value;
                    var newValue = value as FixupCollection<Equipement>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEquipements;
                    }
                }
            }
        }
        private ICollection<Equipement> _equipements;
    
        public virtual ICollection<Site> Sites
        {
            get
            {
                if (_sites == null)
                {
                    var newCollection = new FixupCollection<Site>();
                    newCollection.CollectionChanged += FixupSites;
                    _sites = newCollection;
                }
                return _sites;
            }
            set
            {
                if (!ReferenceEquals(_sites, value))
                {
                    var previousValue = _sites as FixupCollection<Site>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSites;
                    }
                    _sites = value;
                    var newValue = value as FixupCollection<Site>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSites;
                    }
                }
            }
        }
        private ICollection<Site> _sites;
    
        public virtual ICollection<Superviseur> Superviseurs
        {
            get
            {
                if (_superviseurs == null)
                {
                    var newCollection = new FixupCollection<Superviseur>();
                    newCollection.CollectionChanged += FixupSuperviseurs;
                    _superviseurs = newCollection;
                }
                return _superviseurs;
            }
            set
            {
                if (!ReferenceEquals(_superviseurs, value))
                {
                    var previousValue = _superviseurs as FixupCollection<Superviseur>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSuperviseurs;
                    }
                    _superviseurs = value;
                    var newValue = value as FixupCollection<Superviseur>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSuperviseurs;
                    }
                }
            }
        }
        private ICollection<Superviseur> _superviseurs;

        #endregion
        #region Association Fixup
    
        private void FixupEquipements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Equipement item in e.NewItems)
                {
                    item.Administration = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Equipement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Administration, this))
                    {
                        item.Administration = null;
                    }
                }
            }
        }
    
        private void FixupSites(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Site item in e.NewItems)
                {
                    item.Administration = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Site item in e.OldItems)
                {
                    if (ReferenceEquals(item.Administration, this))
                    {
                        item.Administration = null;
                    }
                }
            }
        }
    
        private void FixupSuperviseurs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Superviseur item in e.NewItems)
                {
                    item.Administration = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Superviseur item in e.OldItems)
                {
                    if (ReferenceEquals(item.Administration, this))
                    {
                        item.Administration = null;
                    }
                }
            }
        }

        #endregion
    }
}
